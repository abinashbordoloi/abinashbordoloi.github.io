{"ast":null,"code":"var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\r\n * Converts `value` to a string key if it's not a string or symbol.\r\n *\r\n * @private\r\n * @param {*} value The value to inspect.\r\n * @returns {string|symbol} Returns the key.\r\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\nmodule.exports = toKey;","map":{"version":3,"names":["isSymbol","require","INFINITY","toKey","value","result","module","exports"],"sources":["E:/projects/my_portfolio/website/abinashbordoloi.github.io/node_modules/lodash/_toKey.js"],"sourcesContent":["var isSymbol = require('./isSymbol');\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar INFINITY = 1 / 0;\r\n\r\n/**\r\n * Converts `value` to a string key if it's not a string or symbol.\r\n *\r\n * @private\r\n * @param {*} value The value to inspect.\r\n * @returns {string|symbol} Returns the key.\r\n */\r\nfunction toKey(value) {\r\n  if (typeof value == 'string' || isSymbol(value)) {\r\n    return value;\r\n  }\r\n  var result = (value + '');\r\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n}\r\n\r\nmodule.exports = toKey;\r\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEpC;AACA,IAAIC,QAAQ,GAAG,CAAC,GAAG,CAAC;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACC,KAAK,EAAE;EACpB,IAAI,OAAOA,KAAK,IAAI,QAAQ,IAAIJ,QAAQ,CAACI,KAAK,CAAC,EAAE;IAC/C,OAAOA,KAAK;EACd;EACA,IAAIC,MAAM,GAAID,KAAK,GAAG,EAAG;EACzB,OAAQC,MAAM,IAAI,GAAG,IAAK,CAAC,GAAGD,KAAK,IAAK,CAACF,QAAQ,GAAI,IAAI,GAAGG,MAAM;AACpE;AAEAC,MAAM,CAACC,OAAO,GAAGJ,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}